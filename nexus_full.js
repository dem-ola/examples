'use strict'

/* flips label text for active account check box */
function flipStatusLabel(active,inactive) {

	var idActive = document.getElementById('id_active');
	var labelBox = document.getElementById('label_status_box');

	function setLabel () {
		if (idActive.checked) {
			labelBox.textContent = active;
		} else {
			labelBox.textContent = inactive; //txt: inactive = non-public
		}
	}

	//run this on loading
	setLabel();
		
	//and this on click: id is that generated by django check .html()
	idActive.addEventListener("click", function() {
		setLabel();
	});
}


/* switches element class */
function switchClass(elem, to_cl) {
	elem.className = '';
	elem.className = to_cl;
}


/* hide blank venue form when not needed */
function hideBlankVenue(value) {
	if (value == "True") {
		document.getElementById('venForm').style.display = 'none';
	} else if (value == 'False') {
		document.getElementById('venForm').style.display = 'block';
	}
}


/* toggles display of add new venue form */
function showVenueForm(auth,hint_show,hint_hide,ven_edit) {

	var inclVen = document.getElementById('include_venue');
	var inclVenId = inclVen.id
	var toggleVen = document.getElementById('toggle_new_venue');

	//there's only one of these based on Django if/else statements
	var addVen = document.getElementsByClassName('add_new_venue')[0];

	document.addEventListener('DOMContentLoaded',function() {

		if (ven_edit=='True') {
			switchClass(inclVenId,'show_form');

		} else if ((addVen.value == 'False') && (auth == 'True')) {
			switchClass(inclVen,'hide_form');
			toggleVen.textContent = hint_show;
		}

		//open for anon users
		if (auth=='False') {hideBlankVenue('False');}

		//set 'Select' msg if no country yet selected
		var ctr = document.getElementById('id_ven_ctr')
		var ctrSelect = ctr.options[ctr.selectedIndex].value

		//in case '---' break line selected by mistake
		if (ctrSelect.search(/[a-z]/i) == -1) {
			ctr.selectedIndex = '0'
		} 
	});

	
	if (toggleVen) { //b/c only applicable for logged-in users

		toggleVen.addEventListener("click", function() {
			if (inclVen.className.indexOf("show_form") >= 0) {
				switchClass(inclVen,'hide_form');
				toggleVen.textContent = hint_show;
				addVen.value = 'False';
				hideBlankVenue('True');

			} else if (inclVen.className.indexOf("hide_form") >= 0) {
				switchClass(inclVen,'show_form');
				toggleVen.textContent = hint_hide;
				addVen.value = 'True';
				hideBlankVenue('False');
			}
		});
	}
}


/* send back selected meta_tag not bound to forms */
function attachMetaTag() {	
	//meta tag
	var metabox = document.getElementById('add_evt_meta')
	var metaHiddenTag = document.getElementById('meta_tag')
	
	metabox.addEventListener("change", function() {
		var selected = metabox.options[metabox.selectedIndex].value
		metaHiddenTag.value = selected
	});
}


/* quick check on url - will still be validated later */
function validURL(elemId) {

	var state = '';
	var elem = document.getElementById(elemId);
	var invalidUrl = ' << Please enter a valid url';

	function invalChars(txt) {
		// check for unusual url characters
		var exclude = ['(',')','*','$','[',']','^','<','>']

		var state = ''
		for (var ex in exclude) {
			if (txt.indexOf(exclude[ex]) != -1) {
				state = 'invalid';
				return state
			}
		}
	}

	elem.addEventListener("mouseleave", function(e) {

		var txt = elem.value.trim();
		var http = 'http://www.';
		var httpx = 'http://';
		var https = 'https://www.';
		var httpsx = 'https://';
		var www = 'www.';
		var h = txt.indexOf(http);
		var hx = txt.indexOf(httpx);
		var s = txt.indexOf(https);
		var sx = txt.indexOf(httpsx);
		var w = txt.indexOf(www);
				
		if (txt != '') {
			if (invalChars(txt) == 'invalid') {
				state = 'invalid';
			} else if ( h == 0 || hx == 0 || s == 0 || sx == 0 ) {
				state = 'ok';
			} else if (( w == -1 ) && 
						(h == -1 || hx == -1 || s == -1 || sx == -1)) {
					state = 'neither';
			} else if (( w == 0 ) && 
						(h == -1 || hx == -1 || s == -1 || sx == -1)) {
					state = 'ex_http';	
			} else {
				state = 'bad';
			}
		}
		
		switch (state) {
			case 'neither': elem.value = http+txt; break;
			case 'ex_http': elem.value = http.slice(0,7)+txt; break;
			case 'bad': elem.value += invalidUrl; break;
			case 'invalid': elem.value += invalidUrl; break;
		}
	});
}


/* Ajax/xtthp calls */
function ajaxSend(method,serialized,posturl,callback,arg) {
	
	var status, response;
	var xhttp = new XMLHttpRequest();

	//set open status
	xhttp.open(method, posturl, true);
	
	//set header
	xhttp.setRequestHeader("Content-type", 
		"application/x-www-form-urlencoded");

	//register handler - place after .open statement
	xhttp.onreadystatechange = function() {
		if (this.readyState == 4 && this.status == 200) {
			
			//sometimes we want to use the response in specific ways
			//eg display back to a user; this is not possible from calling fxn
			//b/c xhttp is asynchronous and return statement could
			//execute before the server responses;
			//we invoke a callback to do that for us
			if (callback) {
				response = JSON.parse(this.response);
				callback(response,arg)
			}
		}	
	}

	xhttp.send(serialized);
}


/* ajax return function refreshes recommend count to user */
function refreshComCount(data,ref) {

	var counter = 'com_count_'+ref
	var comId = 'evt_com_'+ref
	var change = false
	var current_cnt = parseInt(document.getElementById(counter).innerHTML)
	var cnt = 0

	// only valid if viewing not adding; with later comments=None
	if ( data.comments != null) {

		var arr_comments = data.comments.split('=com=')
		var html_com = ''
		for (var c = 0; c < arr_comments.length; c++) {
			html_com += "<div class='eve_com_box'>"+arr_comments[c]+"</div>"
		}

	    if (data.no_cookie == false) {
		   //update number and rendering
			var cnt = parseInt(data.com_cnt)
		   	document.getElementById(counter).innerHTML = cnt;
		   	document.getElementById(comId).innerHTML = html_com;
	   	}

		//show comments 
		var page = document.getElementById("evt_com_"+ref);
		var label = document.getElementById("com_"+ref);

		if (cnt != current_cnt) {
			switchClass(page,'show_form');
			label.innerHTML = 'Close';
		} 
	}
}


/* add comments */
function addComments(elem,view,token) {

	var index, ref, serialized;
	var thisId = elem.id;
	var ref = thisId.slice(8)
	var label = 'com_'+ref;

	// use simple dialog box
	var input = prompt('Enter your comment: 10 - 500 chars','')

	var letterNumber = /^[0-9a-zA-Z?!.\-'"@&*:;,\(\)\*\s\+\\\/]+$/;
	
	// cancel if too short
	if (input.length < 10 ) {
		return 0;
	}

	// cancel if not regular chars
	if ( (!input.match(letterNumber) ) ) {
		 return 0;
	}

  	// shorten if too long
	input = input.slice(0,500)

	
	//send ref of event to server
	serialized = 'csrfmiddlewaretoken='+token+'&add_comment='+ref+'&input='+input
	ajaxSend('POST', serialized, view, refreshComCount, ref)

	//open/close comments as needed
	var page = document.getElementById("evt_com_"+ref);

	if (elem.innerHTML == 'Close') { //thus == 'block'
		//page is already open so close it
		label.innerHTML = 'Comments';
		switchClass(page,'hide_form');
	} else {
		//page is closed so open it
		label.innerHTML = 'Close';
		switchClass(page,'show_form');
	}

}


/* register handlers for adding comments */
function comment(view,token) {

	var clicks = {}; //to hold already clicked items
	var comment_adds = document.getElementsByClassName('com_add');

    //event handler for clicking on event details
    //opens and closes detail page; ajax submission to server for analytics
	function clicked(e) {
    	e.addEventListener('click', function() {
    		var eId = e.getAttribute('id')
   			var this_elem = document.getElementById(eId);
   			addComments(this_elem,view,token);
		})
	}

	//add listeners and on click > invoke open/close and ajax submission
    Array.prototype.forEach.call(comment_adds, clicked);
}


/* open/show comments */
function openComments(elem,view,token) {

	var index, counter, ref, serialized;
	var thisId = elem.id;
	var ref = thisId.slice(4)

	//send ref of recommended event to server
	serialized = 'csrfmiddlewaretoken='+token+'&view_comment='+ref
	ajaxSend('POST', serialized, view, refreshComCount, ref)

	//open/close comments as needed
	var page = document.getElementById("evt_com_"+ref);

	if (elem.innerHTML == 'Close') { //thus == 'block'
		//page is already open so close it
		elem.innerHTML = 'Comments';
		switchClass(page,'hide_form');
	} else {
		//page is closed so open it
		elem.innerHTML = 'Close';
		switchClass(page,'show_form');
	}
}


/* register handlers for opening/showing comments */
function showComments(view,token) {

	var clicks = {}; //to hold already clicked items
	var comment_tags = document.getElementsByClassName('comment_tag');

    //event handler for clicking on event details
    //opens and closes detail page; ajax submission to server for analytics
	function clicked(e) {
    	e.addEventListener('click', function() {
    		var eId = e.getAttribute('id')
   			var this_elem = document.getElementById(eId);
   			openComments(this_elem,view,token);
		})
	}

	//add listeners and on click > invoke open/close and ajax submission
    Array.prototype.forEach.call(comment_tags, clicked);
}


/* record clicks and submit */
function submitDetailClick(elem,clicks_url,clicks) {
			
	var ref = elem.getAttribute('name') //event ref

	if (!clicks[ref]) { //not yet recorded
		clicks[ref] = ref //record to prevent being sent on multiple clicks

		//prepare serialized info and send by Ajax
   		var token = document.getElementsByName("csrfmiddlewaretoken")[0].value
   		var serialized = 'csrfmiddlewaretoken='+token+'&clicks='+ref
		ajaxSend('POST',serialized,clicks_url);
   	}
   	return clicks;
}


/* open details box on listings page */
function openDetails(elem) {

	var index, counter;
	var thisId = elem.id;

	//check for box index and set counter
	if (thisId.indexOf(':') > 0) {
		index = thisId.indexOf(':');
		counter = thisId.slice(index+1);
	} else if (thisId.indexOf('more_text_') == 0 ) {
		counter = thisId.slice(10);
	} else if (thisId.indexOf('more_') == 0 ) {
		counter = thisId.slice(5);
	} else {
		counter = thisId;
	}


	// if available: get postcode details for location mapping
	var mapId = document.getElementById("ven_map_"+counter);
	var postcode = mapId.getAttribute('data-postcode');
	
	if (postcode) {

		var geturl = "venuemap/"+postcode;

		//request mapurl and reload div
		var xhttp = new XMLHttpRequest();
		xhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
				var resp = JSON.parse(this.response);
				mapId.innerHTML = resp.staticmap;
			}
		}
	
		xhttp.open("GET", "/"+geturl, true);
		xhttp.send();
	}


	// check if details page open/close and status element
	var page = document.getElementById("page_"+counter);
	var open = 
		window.getComputedStyle(page,null).getPropertyValue('display')
	var e = document.getElementById('more_text_'+counter);

	if (open != 'none') { //thus == 'block'
		//page is already open so close it
		e.innerHTML = 'details';
		switchClass(page,'hide_form');
	} else {
		//page is closed so open it
		e.innerHTML = 'close';
		switchClass(page,'show_form');
	}
}


/* show event details on click and send record of click to server */
function showEventPage(clicks_url) {

	var clicks = {}; //to hold already clicked items
	var moreText = document.getElementsByClassName('more_text');

    //event handler for clicking on event details
    //opens and closes detail page; ajax submission to server for analytics
	function clicked(e) {
    	e.addEventListener('click', function() {
    		var eId = e.getAttribute('id')
   			var this_elem = document.getElementById(eId);
   			openDetails(this_elem);
   			clicks = submitDetailClick(this_elem,clicks_url,clicks);
		})
	}

	//add listeners and on click > invoke open/close and ajax submission
    Array.prototype.forEach.call(moreText, clicked);
}


/* ajax return function refreshes recommend count to user */
function refreshRecCount (data,counter) {

    if (data.no_cookie == false) {
	   //update number and rendering
		var cnt = parseInt(data.rec_cnt)
	   	document.getElementById(counter).innerHTML = cnt;
   	}
}


/* record and update recommend clicks */
function recommend(view,token) {

	var thisId, counter, ref, serialized, response, currVal;
	var recTags = document.getElementsByClassName('recommend_tag');
	
	//updates current recommend count value
	function recommended(e) {

		e.addEventListener('click', function() {

			thisId = e.getAttribute('id') ;
			ref = thisId.slice(4) ;//remove rec_
			counter = "rec_count_"+ref ;
			
			//update current value
			currVal = document.getElementById(counter).innerHTML ;
			currVal = parseInt(currVal) ;
			if (isNaN(currVal)) {
				currVal = 0 ;
			}

			//send ref of recommended event to server
			serialized = 'csrfmiddlewaretoken='+token+'&recommend='+ref
			ajaxSend('POST', serialized, view, refreshRecCount, counter)
			
       	});		
	}
	
	//add listeners and on click > invoke open/close and ajax submission
    Array.prototype.forEach.call(recTags, recommended);
}



/* create regex expression for filter_tbl, pass to func and store */
function filterThis(input, rows) {

	input = input.split(' ');

	//start with all rows 
	for (var r = 0; r < rows.length; r++) {
		rows[r].style.display = 'block';
	}

	for (var i = 0; i < input.length; i++) {
		var val = '^(?=.*' + input[i].trim() + ').*$';
		var reg = RegExp(val, 'i'); //i = case insensitive

	   	//hide rows without input text
	   	var rlen = rows.length
	    for (var r = 0; r < rlen; r++) {
	    	var row = rows[r];
	    	var rowText = row.textContent;
	    	var rowText = rowText.replace(/\s+/g, ' '); //replace multi-spaces
	    	var hasText = reg.test(rowText) 
	    	if (!hasText) {row.style.display = 'none'};
		}
	}
}


/*filter table based on actions selected */
function filterTable(tbl,box,opts) {

	//tbl=table to filter
	//box=search box if there's one
	//col=column to sort by
	//prefilter=prefilter table on load

	var rows = document.getElementById(tbl).rows;
	var filt = document.getElementById(box); //search box input
	var opts = document.getElementById(opts); //options filters

	//blank if there's a reset button
	try {
		var reset = document.getElementById('reset')
		reset.addEventListener('click', function() {
			filterThis('', rows);			
		});
	}
	catch (e) {}

	//filter based on key input
	filt.addEventListener('keyup', function() {
		filterThis(filt.value,rows);				
	});

	//only valid for pages with an options element
	if (opts) {

		//filter based on options box filtering
		opts.addEventListener('change', function() {

			//start with all rows visible
			for (var r = 0; r < rows.length; r++) {
				rows[r].style.display = 'block';
			}

			var rlen = rows.length;
			var opt_select = opts.value;

			//set opt parameter
			if (opt_select.search('live') > 0) {
				opt_select = 'live'
			} else if (opt_select.search('past') > 0) {
				opt_select = 'past'
			}

			//loop through rows and hide those that fail opt parameter
			var nonvisible = 0
			for (var r = 0; r < rlen; r++) {
				var row = rows[r];
		    	var rowText = row.textContent;
		    	var rowText = rowText.replace(/\s+/g, ' ');
		    	var rowText = 
		    		rowText.match(/(\w+\s\d{1,2}\s[a-z]{3}\s\d{4})/i)[0];
		    	
				if (opt_select == 'live' && rowText.search(/from/i) == -1) {
							//remove rows that don't have From <date>
		    				row.style.display = 'none';
		    				nonvisible++

		    	} else if (opt_select == 'past' && 
		    				rowText.search(/ended/i) == -1) {
		    				//remove rows that don't have Ebded <date>
		    				row.style.display = 'none';
		    				nonvisible++
				}
			}

			//update events count with those visible
			document.getElementById('eve_count').textContent = 
													rlen - nonvisible
		});
	}
}


/* concat event name to tags for */
function evtListingLink() {

	var evtName = document.getElementById('id_evt_nam');
	var yourEventName = document.getElementById('your_event_name');
	
	evtName.addEventListener('keyup', function() {
		yourEventName.innerHTML = encodeURI(evtName.value);
	});
}


/* window scroll positions */
function getScrollOffsets() {
	var offsetY = window.pageYOffset;
	var offsetX = window.pageXOffset;
	return {y:offsetY, x:offsetX}
}


/* scroll to place on screen */ 
function scrollTo(wh) {

	//positions of window and scroll element
	var wid = window.outerWidth;
	var where = document.getElementById(wh);

	//initialize target offset
	var targetOff = 0; 

	var move = 1 //keep outside func

	/* simple scrolling animation */
	function scroller() {

		if (where.getBoundingClientRect().y > targetOff)  {
			window.scroll(0, move);
			move += 2;
		} 
		else {clearInterval(myfunc)}
	}
		
	//timeout to control scroll
	var myfunc = setInterval(function() {scroller()}, 1);
}


/* open and close menu options */
function openMenu(auth) {

	var menuIcon = document.getElementById("menu_icon");
	var closeIcon = document.getElementById("close_icon");
	var wid = window.innerWidth;
	
	var menuBtns = [
					"btn_login", "btn_create", "btn_events",
					"btn_reviews", "btn_stories", "btn_videos",
					"btn_popular", "btn_essays", "btn_myaccount",
					"btn_delacct", "btn_editacct", "btn_myevents",
					"btn_myvenues", "btn_logout", "close_icon"
					]
	var blen = menuBtns.length;

	if (auth != 'true' && wid > 480) { //

		//hide all the drop down menu buttons 
		document.addEventListener('DOMContentLoaded', function() {

			var btns = ["btn_create", "btn_events",
						"btn_reviews", "btn_stories", "btn_videos",
						"btn_popular", 'btn_essays', "close_icon"
						]

			var blen = btns.length;
			for (var b = 0; b < blen; b++ ) {
				var btn = document.getElementById(btns[b]);
				if (btn) {btn.style.display = 'none'};
			}
		});
	}


	//show buttons when menu icon is clicked
	menuIcon.addEventListener("click",function() {

		if (auth == 'true') {			
			menuContext('true',true); //show Me btns
		
		} else { //show anon btns

			for (var b = 0; b < blen; b++) {
				var btn = document.getElementById(menuBtns[b]);
				if (btn) {btn.style.display = 'block'};
			}

			//but hide menu icon
			menuIcon.style.display = 'none';
			closeIcon.style.display = 'block';		
		
		}
	});


	//hide buttons when close icon is clicked
	closeIcon.addEventListener("click",function() {
		for (var b = 0; b < blen; b++) {
			var btn = document.getElementById(menuBtns[b]);
			if (btn) {btn.style.display = 'none'};
		}
		
		//but show menu icon
		menuIcon.style.display = 'block';
		closeIcon.style.display = 'none';

	});
}


/* set context for menu */
function menuContext(auth,can_edit) {

	if (auth == 'true') {

		var savedColDisplay
		var logout = document.getElementById('btn_logout')
		var navBtns = document.getElementsByClassName('btn_nav')
		var navMeBtns = document.getElementsByClassName('btn_nav_me')
		var navRegs = document.getElementsByClassName('btn_reg')
		var menuItem =  document.getElementById('menu_item')
		var whatsOn = document.getElementById('btn_events')
		var whatsOn = document.getElementById('btn_events')
		var menuIcon = document.getElementById("menu_icon");
		var closeIcon = document.getElementById("close_icon");

		//if me actions: remove non-Me btns and filter bar
		if (can_edit) {
			for (var col of navMeBtns) {
				col.style.display = 'block'
			}
			menuIcon.style.display = 'none'
			closeIcon.style.display = 'block'
		}

		//if click on WhatsOn: restore all regular buttons; set meBtns to none
		whatsOn.addEventListener('click', function() {

			for (var i = 0; i < navRegs.length; i++) {
				navRegs[i].style.display = 'block'
			}

			for (var i = 0; i < navMeBtns.length; i++) {
				navMeBtns[i].style.display = 'none'
			}

		});
	}
}


/* set context for pagetop navbar */
function navbarContext(auth,can_edit) {

	if (auth == 'true') {

		var savedColDisplay, savedFilterDisplay
		var logout = document.getElementById('nav_logout')
		var navCols = document.getElementsByClassName('nav_col')
		var navMeCols = document.getElementsByClassName('nav_col_me')
		var navRegs = document.getElementsByClassName('nav_reg')
		var filterBar =  document.getElementById('filter_bar')
		var whatsOn = document.getElementById('nav_listing')

		//get set of non-me buttons
		let a = new Set(navCols);
		let b = new Set(navMeCols);

		let intersection = new Set([...a].filter(x => b.has(x)));
		let union = new Set([...a, ...b]);
		let difference = new Set([...a].filter(x => !b.has(x)));

		//if me actions: remove non-Me btns and filter bar
		if (can_edit) {

			for (var col of difference) {
				savedColDisplay = window.getComputedStyle(col).display
				col.style.display = 'none'
			}
			savedFilterDisplay = window.getComputedStyle(filterBar).display
			filterBar.style.display = 'none'
		}


		//if click on WhatsOn: restore all regular buttons; set meBtns to none
		whatsOn.addEventListener('click', function() {

			for (var i = 0; i < navRegs.length; i++) {
				navRegs[i].style.display = 'block'
			}
			
			filterBar.style.display = 'block'

			for (var i = 0; i < navMeCols.length; i++) {
				navMeBtns[i].style.display = 'none'
			}

		});


		if (logout) {
			//restore display options 
			//!important else they'll stay invisible
			logout.addEventListener('click', function() {

				for (var col of difference) {
					col.style.display = savedColDisplay
				}
				filterBar.style.display = 'flex'
			});
		}
	}
}


/* flip pix on feature page */
function flipFeaturePix(pix) {
	
	//get all pix names
	var re = /([a-zA-Z0-9_]+\.jpg)/g
	var pix = pix.match(re) 

	//get prefix
	var cell = document.getElementById("prime_pix_cell");
	var cell = document.getElementsByClassName("prime_pix_cell")[0];
	var link = cell.style.backgroundImage

	//get parts of the file name
	var pixName = link.split('/').pop() //pix name is after last forward slash
	var pixName = pixName.slice(0,-1) //remove trailing bracket
	var prefix = link.indexOf(pixName)
	var prefix = link.slice(4,prefix) //remove leading 'url('

	//set loop parameters
	var i = 0;
	var p = pix.length;

	//call updateLink
	function doInterval() {
		setInterval(function (){
			if (i == p) {i = 0} //reset if at end of array

			var newlink = 'url('+prefix+pix[i]+')'
			cell.style.backgroundImage = newlink

			i++ //increment loop count
		},3000);
	}

	doInterval()
}


/* enable previously disabled buttons to confirm event/venue delete */
function enableButton() {

	var delBtns = document.getElementsByClassName('del_event');

	function delEvent(e) {

		e.addEventListener('click', function () { 
			
			//find state of button
			var counter = this.getAttribute('id') //Django forloop count
			var delConfirm = 
				document.getElementById('btn_del_event_confirm_'+counter)
			var state = delConfirm.disabled

		//activate confirm button
			if (state == true) {
				delConfirm.disabled = false
				delConfirm.style.backgroundColor = '#000'
				delConfirm.style.color = '#FFF'
				delConfirm.style.border = '1px solid #000'

			} else { //disable
				delConfirm.disabled = true
				delConfirm.style.backgroundColor = '#F0F0F0'
				delConfirm.style.color = '#7F7F7F'
				delConfirm.style.border = '1px solid'
			}
		});
	}

	//set listeners
	Array.prototype.forEach.call(delBtns, delEvent)
}


/* show bunch of more feature reviews/stories list */
function loadmore() {
	var roll = document.getElementsByClassName('load_roll')[0];
	var blog = document.getElementById('blog')
	roll.addEventListener('click', function () {
		blog.submit();
	});
}


/* add semi-colon separator to event tags */
function addTagColon() {

	function clean_colon(el) {

 		//remove multiple end semi-colons
 		while (el.value.endsWith(';;')) {
 			el.value = el.value.replace(';;',';')
 		}

 		//remove any orphan semi-colons
		if (el.value == ';'){el.value = ''}
	}

	var idTag = document.getElementById('id_tag')

	//initial keypress which calls up auto-complete
	idTag.addEventListener('keydown', function(){clean_colon(this)});	

	//on subsequent changes
	idTag.addEventListener('keyup', function(){clean_colon(this)});

	////add trailing semi-colon if required
	idTag.addEventListener('mouseleave', function(){
   		if (this.value != '' && !this.value.endsWith(';')) {
			this.value += ';'
		}	
	});
}


/* give focus to search bar when window loads */
function searchFocus() {
		document.getElementById("search_box").focus();
}


/* display the GET button for the home page search box */  
function showFetch() {

	var openCal = document.getElementById('open_calendar');
	var openCalWdOrig = parseInt(window.getComputedStyle(openCal).width);
	var form = document.getElementById('search_form');
	var box = document.getElementById('search_box');
	var boxBackgd = parseInt(window.getComputedStyle(box).background);	
	var fetch = document.getElementById('search_fetch');
	var boxVisibility = window.getComputedStyle(box).visibility;

	// resizing without box input
	function general() {
		window.addEventListener('resize', function() {

			// keep open calendar button not larger than search box
			var boxWidth = parseInt(window.getComputedStyle(box).width);
			var openCalWd = parseInt(window.getComputedStyle(openCal).width);
		
			if (boxWidth < openCalWdOrig) {
				openCal.style.width = boxWidth + 'px';
			} else {
				openCal.style.width = openCalWdOrig +'px';
			}
		});
	}

	// box input also with resizing
	function show() {
		
		fetch.style.display = 'inline-block';
		box.style.backgroundColor = '#000';
		box.style.backgroundSize = '0px 0px;'

		// for narrow widths
		function mobileSize() {
			form.id = 'search_form_mob';
			box.id = 'search_box_mob';
		}
			
		// without window resizing - mainly on mobile devices
		if (window.innerWidth < 768 ) {
			mobileSize();
		} 

		// maintain graceful balance on resizing
		window.addEventListener('resize', function() {

			if ( window.innerWidth < 768) {
				mobileSize();
			} else {
				fetch.style.display = 'inline-block'
				form.id = 'search_form';
				box.id = 'search_box';			
			}
		});
	}

	//initial - visibility for mobile
	if (box.value.length > 0 && boxVisibility == 'visible'){
		show();
	} else {
		fetch.style.display = 'none'
		general();
	}
	
	//change attributes on search box input
	box.addEventListener("keydown",function() {
		show();
	});
}


/* set focus/hover on features - esp to work for mobile touchstart */
function highlightFeatureBox(elems) {

	//unpack elems which is a literal js object
	//these are set as name/value=array pairs on the HTML doc
	//the elems must be specified with the . or # css properties
	var triggerOn = elems.triggerOn;
	var setThese = elems.setThese;

	var triggerClasses = []; //for . class elements
	var triggerIds = []; //for # id elements

	//unpack the triggers into classes and ids
	var iLen = triggerOn.length; 
	for (let i = 0; i < iLen; i++) {
		var e = triggerOn[i];
		if (e.startsWith('.')) {
			triggerClasses.push(e.slice(1)) ;
		} else if (e.startsWith('#')) {
			triggerIds.push(e.slice(1));
		}
	}

	//the order of these is important!! - enter/start first so we can backup
	var listeners = ['mouseenter','touchstart','mouseleave','touchend'];
	var backup = {};
	backup.counter = 0;

	//adds event listeners for each listener type for each element
	//in the id/class specified in the html template
	//this is actualy the 3rd function in the process
	//Func A: iterates over each elem and sends to Func B
	//Func B: iterates over each listener and sends plus elem to Func C
	//Func C: is here - activates the listeners
	function activateListeners(e, action) {

		e.addEventListener(action, function() {

			for (var item in setThese) {
				
				var it = setThese[item] //eg {className : [cssStyle,value]}
				
				for (var key in it) { //eg for each className

					var kids = null;
					var style = it[key][0] ;
					var value = it[key][1] ;

					//get affected children
					var name = key.slice(1) //removes leading '.' or '#'
					if (key.startsWith('.')) {
						kids = e.getElementsByClassName(name);
					} else if (key.startsWith('#')) {
						kids = document.getElementById(name);
						kids = [kids]
					}

					//apply styles to elements
					if (kids) {
						var klen = kids.length
						for (var i = 0; i < klen; i++) {

							var kid = kids[i]
							
							if (action == 'mouseenter' || 
								action == 'touchstart') {

								//get style computed style value as
								//elem.style.property only works with 
								//inline styles
								var compValue = 
									window.getComputedStyle(kid)[style] ;

								//check if clone exists - saved as counter prop
								//if yes: save the computed value there
								//else: create a new clone and save that to
								//the object literal with kid.counter as key
								if (backup.hasOwnProperty(kid.counter)) {
									//clone exists
									backup[kid.counter].style[style] =
																compValue ;
								} else {
								
									//we clone to avoid orininal values being
									//overwritten by reference
									var clone = kid.cloneNode(true) //deepclone
									clone.style[style] = compValue ;
									
									//store the clone in an object literal
									backup[backup.counter] = clone ; //key
									kid.counter = backup.counter ; //unique key
									backup.counter++ ;//update counter
								}

								//update element to new hover/touch values
								kid.style[style] = value ;

							} else {

								//mouseleave || touchend: we need to restore

								//retrieve clone
								var cloned = backup[kid.counter] ;

								//copy original style back to element
								kid.style[style] = cloned.style[style] ;
							}
						}
					}
				}
			}	
		});
	}


	//passing multiple args to EventListener is a bit tricky
	//so here we let Array.func pass the target DOM object to getListeners
	//which itself starts a loop on listener actions ('mouseenter etc') and
	//invokes activateListeners with 2 args: the target elem & the action
	function getListeners(e) {
		var listlen = listeners.length
		for (var l = 0; l < listlen; l++) {
			var action = listeners[l] //eg mouseenter, touchend etc
			activateListeners(e, action)
		}
	}
	
	//start triggers for claases
	var iLen = triggerClasses.length;
	for (let i = 0; i < iLen; i++) {
		var aClass = triggerClasses[i];
		var classElems = document.getElementsByClassName(aClass)
	}
	Array.prototype.forEach.call(classElems,getListeners)

	//start triggers for Ids
	var iLen = triggerIds.length; 
	for (let i = 0; i < iLen; i++) {
		var anId = triggerIds[i];
		getListeners(document.getElementById(anId))
	}	
}


/* event dates calendar */
function eventDates(par, span, name) {
	//par=parent to attach to
	//span=years around current for calendar dates
	//name=name to call calendar; also used for id

	var dates = [document.getElementById('from'),
					document.getElementById('to')]

	for (var i = 0; i < dates.length; i++) {

		var date = dates[i]
		
		date.addEventListener('click', function() {

			var calWrapper = document.getElementById(name);

			var caller = this.id
			
			//if calendar exists, remove then build new one
			//solves a multitude of problems btw from & to
			//if trying to use an existing one
			if (calWrapper) {calWrapper.remove()}
				
			//build calendar
			callCalendar({par:par, span:span,name:name, caller:caller});
		
		});
	}
}


/* create event time slots */ 
function createTimeSlotsArray(interval) {

	var slots = []
	
	for (let t = 0; t < 24; t++ ) {
		for (let m = 0; m < 60; m += interval) {
			
			//convert hr hands to double digs eg 3 >> 03
			if (String(t).length == 1) {t = '0'+t}

			//convert 0 mins into 00
			if (m == 0) {m = '00'}

			//add to array
			var slot = t + ':' + m;
			slots.push(slot);

			//convert min back to number so 00+=15 = 15 not 0015
			m = Number(m);
		}
	}
	return slots
}


/* build time select options */
function buildSlots(time,interval) {
	
	var slots = createTimeSlotsArray(interval)

	//find currently selected
	var curValue = time.value

	//create select node
	let select = document.createElement("select");
	select.id = time.id
	select.className = 'time_select'
	select.name = time.id.substring(3,) //strip 'id_'

	////replace text node from Django with select node
	var parent = time.parentElement
	parent.replaceChild(select, time)

	//create options
	var lenslots = slots.length;
	for (var s = 0; s < lenslots; s ++) {

		var slot = slots[s]

		let option = document.createElement("option");
		select.appendChild(option);
		option.value = slot
		option.text = slot

		//set selected value
		if (slot == curValue) {option.selected = true}		
	}	
}


/* populate event time DOM elements */ 
function eventTimeSlots(user,slotType,interval) {

	var times = [];
	var ids = [];

	//ids for select boxes
	if (slotType == 'event') {
		ids = ['id_tme_beg','id_tme_end'];

	} else if (user != 'anon' && slotType == 'venue') {
		ids = ['id_mon_op','id_mon_cl','id_tue_op','id_tue_cl',
				'id_wed_op','id_wed_cl','id_thu_op','id_thu_cl',
				'id_fri_op','id_fri_cl','id_sat_op','id_sat_cl',
				'id_sun_op','id_sun_cl']
	}

	//get select option boxes
	if (ids) {
		for (var i = 0; i < ids.length; i++) {
			times.push(document.getElementById(ids[i]))
		}
	}

	//create and attavh times slots
	for (var t = 0; t < times.length; t++ ) {
		var time = times[t]
		buildSlots(time,interval);
	};
}


/* highlight selected page */
function highlightCurPageButton(sitePrefix) {

	var navCols = { //page:colId
		'listings': 'listing',
		'popular': 'popular',
		'essay':'write',
		'review':'review',
		'people':'people',
		'video':'video',
		'add_event':'add_event',
		'no_account':'add_event',
		'loginpage':'login',
		'logout':'login',
		'login/existing':'add_event',
		'reset':'edit_me', //before my_account!
		'my_account':'me',
		'delete':'delete_me',
		'my_events':'my_events',
		'my_venues':'my_venues',
	}


	var href = window.location.href //current page
	let selectclassName = 'navColSelected' //add to highlight selected

	function doIt(n) {
		var curPage = document.getElementById('nav_'+navCols[n]);
		var btn = curPage.children[0];
		btn.className += ' ' + selectclassName; //actual button
		curPage.className += ' ' + selectclassName; //the cell the button is in
	}

	if (href == sitePrefix) { //first time on landing page
		doIt('listings');

	} else if (href.indexOf('pop=') > 0) {
		doIt('popular');

	} else {
		for (let n in navCols) {
			if (navCols.hasOwnProperty(n) ) {
				if (href.indexOf('/'+n+'/') > 0 ) {
					doIt(n)
					break;
				}
			}
		}
	}
} 


/* show the filter options when clicked */
function showFilterWhat(par, spanYear, prompt, addr, curDatePick) {

	var name = 'cal_wrapper'

	var navSec = document.getElementById('nav_section');
	var navTop = navSec.getBoundingClientRect().y;
	var navHt = parseInt(window.getComputedStyle(navSec).height);
	
	var exp = document.getElementById('explore_top');
	var expHt = parseInt(window.getComputedStyle(exp).height);

	var fWhat = document.getElementById('filter_what');
	var fWhatBtn = document.getElementById('filter_what_btn')
	let arrowWhat = document.getElementById('r_arrow_what')

	var fWhere = document.getElementById('filter_where');
	var fWhereBtn = document.getElementById('filter_where_btn')
	let arrowWhere = document.getElementById('r_arrow_where')

	var fWhen = document.getElementById('filter_when');
	var fWhenClose = document.getElementById('filter_when_close');
	var fWhenBar = document.getElementById('filter_when_bar');

	var fTime = document.getElementById('filter_time');
	var fTimeClose = document.getElementById('filter_time_close');
	var fTimeBar = document.getElementById('filter_time_bar');

	var calWrapper = document.getElementById('cal_wrapper')
	var calOpenBtn = document.getElementById('open_calendar')

	var searchForm = document.getElementById('search_form');
	var searchZ = window.getComputedStyle(searchForm).zIndex;


	function openCalendar() {
	
		var calWrapper = document.getElementById('cal_wrapper');

		if (!calWrapper) { //only open calendar if not already created

			//open calendar
			callCalendar({par:par, spanYear:spanYear, prompt:prompt, 
							name:name, addr:addr, curDatePick:curDatePick});
			calOpenBtn.value = 'Close';
			searchForm.style.zIndex = 10; //on top esp for mobile portratit


		} else if (calWrapper.style.display == 'none') { //else open
			calWrapper.style.display = 'block';
			calOpenBtn.value = 'Close';
			searchForm.style.zIndex = 10; //on top esp for mobile portratit

		} else {
			calWrapper.style.display = 'none';
			calOpenBtn.value = 'Calendar';
			searchForm.style.zIndex = searchZ;
		}
	}

	
	function stdListen(e) { //listeners for standard non-flex filter options
		
		var opt = e.option; //option title
		var optName = e.optName;
		var tagsId = e.tagsId; 
		var footerId = e.footerId; 
		var btn = e.btn;
		var arrow = e.arrow;

		opt.addEventListener('click', function(opt){

			//can't import tags object before here as hidden
			var tags = document.getElementById(tagsId);
			var footer = document.getElementById(footerId);
			var navTopNow = navSec.getBoundingClientRect().y;

			if (btn.value == 'close') { //already open

				tags.style.display = 'none';
				footer.style.display = 'block';
				btn.value = optName;
				arrow.style.display = 'inline-block'

			} else { //currently closed

				tags.style.display = 'block';
				footer.style.display = 'none';
				btn.value = 'close';
				arrow.style.display = 'none';

				//position with window scroll position
				var scroll = getScrollOffsets().y

				if (navTopNow == 0) {
					tags.style.top = scroll - navTop + 1 + 'px';
					//+1 to allow for the navsec border
				} else {
					tags.style.top = 0;
				}
			} 

			//prevent form submit on clicks to open up filter drop-down
			opt.preventDefault(); 

		});
	}

	function flexListen(e) { //listeners for flex-column filter options
		var opt = e[0]; //option title
		var optBar = e[1]; //options
		opt.addEventListener('click', function(e){
			opt.style.display = 'none';
			optBar.style.display = 'block';
			
			//prevent form submit on clicks to open up filter drop-down
			e.preventDefault();
		});
	}

	function closeListen(e) { ////listeners for flex-column filter close
		var close = e[0]; //close button
		var opt = e[1]; //option title
		var optBar = e[2]; //options nb. includes close button
		close.addEventListener('click', function(e){
			opt.style.display = 'block';
			optBar.style.display = 'none';
			//prevent form submit on clicks to open up filter drop-down
			e.preventDefault();
		});
	}

	//open calendar
	calOpenBtn.addEventListener('click', function(){
		openCalendar();
	});

	//set listeners for flex-column filter options
	var standard = [ 
			{option:fWhat, optName:'#what', tagsId:'list_metas',
			footerId:'footer', btn:fWhatBtn, arrow:arrowWhat},

			{option:fWhere, optName:'#where', tagsId:'list_cities',
			footerId:'footer', btn:fWhereBtn, arrow:arrowWhere}
			];
	Array.prototype.forEach.call(standard, stdListen);

	//set listeners for flex-column filter options
	var flexed = [ [fWhen,fWhenBar], [fTime,fTimeBar] ];
	Array.prototype.forEach.call(flexed, flexListen);

	var closers = [ [fWhenClose,fWhen,fWhenBar], [fTimeClose,fTime,fTimeBar] ];
	Array.prototype.forEach.call(closers, closeListen)

}

/* b/c Date(yr,nxt_mth,0) = Date(yr,this_mth,last_dte) = last dte this mth */
function daysInMonth(thisyr, thismth) {
	return new Date(thisyr, thismth + 1, 0).getDate();
}


/* get years arround the current year to show in options */
function getYears(thisyr, span) {
	var years = [];
	for (var i = thisyr - span; i < thisyr + span + 1; i++) {
		years.push(i);
	}
	return years
}


/* create frame for calendar and month/year select options */
function buildCalendar(args) {

	//umpack args
	var parent = args.parent;
	var spanYear = args.spanYear;
	var thisMonth = args.thisMonth;
	var thisYear = args.thisYear;
	var daysofWeek = args.daysofWeek;
	var months = args.months;
	var name = args.name;
	var prompt = args.prompt;
	var calOpen = args.calOpen;
	var dowlen = daysofWeek.length;
	var monlen = months.length;

	//remove any existing calendars
	//avoids clashes with ids
	var calendars = document.getElementsByClassName('calendar');
	if (calendars.length > 0) {
		for (var c = 0; c < calendars.length; c++) {
			calendars[c].remove()
		}
	}

	//create div element to hold calendar
	var calWrapper = document.createElement("div");
	parent.appendChild(calWrapper);
	if (!name) { 
		calWrapper.id = 'cal_wrapper';
	} else {
		calWrapper.id = name;
	}
	args.calWrapperId = calWrapper.id
	calWrapper.className = 'calendar';

	//build month/option selectors
	var calSelector = document.createElement("div");
	calWrapper.appendChild(calSelector);
	calSelector.id = 'cal_selector';
	args.calSelectorId = calSelector.id;
	createCalSelectors(args);

	//add dates
	populateCalendarDates(args); //dates

	//add footer to show date selected and submit button
	//but only if there's a prompt for the feedback as well
	if (prompt) {
		createCalendarFooter(args);
	}

	//show calendar
	calWrapper.style.display = 'block';
}


/* create month and year selectors */
function createCalSelectors(args) {

	//umpack args
	var calSelector = document.getElementById(args.calSelectorId);
	var calWrapper = document.getElementById(args.calWrapperId);
	var parent = args.parent;
	var spanYear = args.spanYear;
	var thisMonth = args.thisMonth;
	var thisYear = args.thisYear;
	var daysofWeek = args.daysofWeek;
	var months = args.months;
	var dowlen = daysofWeek.length;
	var monlen = months.length;

	//get years for year select
	var years = getYears(thisYear, spanYear);

	//create X icon for closing
	if (args.caller && args.caller != 'cal_wrapper') {
		var calxIcon = document.createElement('span');
		calxIcon.id = 'calxIcon';
		calxIcon.innerHTML = 'X';
		calSelector.appendChild(calxIcon);
		calxIcon.addEventListener('click', function() {
			calWrapper.style.display = 'none';
		});
	}


	//create month selector
	var monthSelect = document.createElement("select");
	monthSelect.id = 'month_select';
	monthSelect.className = 'cal_selectors';
	calSelector.appendChild(monthSelect);

	//create and append the options
	for (let j = 0; j < monlen; j++) {
    	let option = document.createElement("option");
    	option.value = months[j];
    	option.text = months[j];
    	monthSelect.appendChild(option);
	}

    //set month to month selected
    monthSelect.value = months[thisMonth];


    //create year selector
	var yearSelect = document.createElement("select");
	yearSelect.id = 'year_select';
	yearSelect.className = 'cal_selectors';
	calSelector.appendChild(yearSelect);

	//create and append the options
	for (let j = 0; j < years.length; j++) {
		let option = document.createElement("option");
		option.value = years[j];
		option.text = years[j];
		yearSelect.appendChild(option);
	}

	//set year to year selected
	yearSelect.value = thisYear;

}


/* create array comprising of arrays of date rows in month/year */
function createDateRows(thisMonth, thisYear, dowlen) {

	var thisRow = [];
	var mthRows = [];

	// get number of days in month
	var numDays = daysInMonth(thisYear, thisMonth);

	//get first day of the month: 0 = Sun
	//we need this to set num of null days in week before month starts
	var firstDay = new Date(thisYear,thisMonth,1).getDay();

	//create null entries for days of week before first day
	for (var n = 0; n < firstDay; n++) {
		thisRow.push(null);
	}

	//populate rows with dates
	for (var i = 0, j = 0; i < numDays + 1; i++) {

		//if row is complete: push to main array, reset params
		if (thisRow.length == dowlen || i == numDays) {		
			mthRows.push(thisRow); j = 0;  thisRow = [];
		} 
		
		//populate row with next date
		thisRow.push(i + 1); //+1 b/c cal is 1-based
		j++
	}

	//if applicable create null entries for last row
	var lastRow = mthRows[mthRows.length-1]
	while (lastRow.length < dowlen) {
		lastRow.push(null);
	}

	return mthRows
}


/* populate calendar table with the dates in selected month/year */
function populateCalendarDates(args) {

	//umpack args
	var calWrapper = document.getElementById(args.calWrapperId);
	var thisMonth = args.thisMonth;
	var thisYear = args.thisYear;
	var daysofWeek = args.daysofWeek;
	var months = args.months;
	var dateSelected = args.dateSelected
	var dowlen = daysofWeek.length

	//get rows of week dates with each week as its own array
	var dateRows = createDateRows(thisMonth,thisYear,dowlen)
	var drowlen = dateRows.length

	//create dates table
	var newDteTbl = document.createElement('table')
	newDteTbl.id = 'dates_table'

	//add this or replace any existing table
	var curDteTbl = document.getElementById('dates_table')
	if (curDteTbl) {
		calWrapper.replaceChild(newDteTbl, curDteTbl)
	} else {
		calWrapper.appendChild(newDteTbl)
	}

	//now get table
	var cTable = document.getElementById('dates_table');
	
	//create header and insert days of week
	var header = cTable.createTHead()
	var headerRow = header.insertRow(0);
	headerRow.id = 'cal_header'

	for (var i = 0; i < dowlen; i ++) {
		var cell = headerRow.insertCell(i);
		cell.innerHTML = daysofWeek[i];
	}

	//insert date rows
	for (var i = 0; i < drowlen; i ++) {
		var row = dateRows[i];
		var newTblRow = cTable.insertRow(); 
		newTblRow.style.height = '40px';
		
		for (var j = 0; j < row.length; j++) {	
			let cell = newTblRow.insertCell(j)
			let val = dateRows[i][j]
			cell.id = 'date_select_' + val; //so we can highlight later
			cell.className = 'date_select';
			cell.innerHTML = val;
		}
	}

	//update date listeners
	setDateListeners(args);
}


/* submit calendar choice */
function calDateSubmit(calSubmitBtn, calWrapper, prompt, caller, urlAddress) {

	calSubmitBtn.addEventListener('click', function (e) {

		var feedback = document.getElementById('cal_feedback').innerHTML
		
		if (feedback != prompt) {
			if (urlAddress) {
				window.location.href = urlAddress + encodeURI(feedback)
			} 
		}
	});
}


/* create calendar footer */
function createCalendarFooter (args) {

	var prompt = args.prompt;
	var urlAddress = args.urlAddress; 

	//unpack args
	var calWrapper = document.getElementById(args.calWrapperId);
	var months = args.months;
	var thisMonth = args.thisMonth;
	var thisYear = args.thisYear;
	var prompt = args.prompt;
	var caller = args.caller;

	//create footer element
	var calFooter = document.createElement('div');
	calWrapper.appendChild(calFooter);
	calFooter.id = 'cal_footer';

	//feedback message on selection
	var calFeedback = document.createElement('span');
	calFooter.appendChild(calFeedback);
	calFeedback.id = 'cal_feedback';
	calFeedback.innerHTML = prompt;

	//submit button
	var calSubmit = document.createElement('span');
	calFooter.appendChild(calSubmit);
	calSubmit.id = 'cal_submit';

	var calSubmitBtn = document.createElement('button');	
	calSubmit.appendChild(calSubmitBtn);
	var btnText = document.createTextNode("GO");
	calSubmitBtn.appendChild(btnText);
	calSubmitBtn.id = 'cal_submit_btn';

	//set submit listener
	calDateSubmit(calSubmitBtn, calWrapper, prompt, caller, urlAddress);

}


/* set listeners for dates, format selected and feedback chosen date */ 
function setDateListeners(args) {

	var dateSelect = document.getElementsByClassName('date_select');
	var lendateSelects = dateSelect.length;
	var prompt = args.prompt;

	//feedback when date selected + enable submission
	for (var i = 0; i < lendateSelects; i ++) {
		dateSelect[i].addEventListener('click', function() {

			//remove formatting of previous selection if any
			var prev = document.getElementById('date_selected')
			if (prev && prev != this) {
				prev.id = null
			}
			
			if (this.innerHTML) {

				if (prompt) { //this has the feedback and submit button
					var calSubmitBtn = 
							document.getElementById('cal_submit_btn');

					//highlight selected
					this.id = 'date_selected'

					//enable submission
					calSubmitBtn.style.cursor = 'pointer';
					calSubmitBtn.style.backgroundColor = 'black';
					calSubmitBtn.style.color = 'white';

				}

				//update feedback
				getDateFeedback(this.innerHTML,args);	
			}
		});
	}
}


/* string for feedback */
function getDateFeedback(picked, args) {

	//umpack args
	var daysofWeek = args.daysofWeek;
	var months = args.months;
	var prompt = args.prompt;
	var thisMonth = args.thisMonth;
	var thisYear = args.thisYear;
	var caller = args.caller;

	//get month and year if selected
	var month = thisMonth;
	var mthPick = months[month];
	var year = args.thisYear;

	var calFeedback, feedback;
	var invalid = false;
	var warningEarly = 'Oops, too early!';
	var warningLate = 'Oops, too late!';

	if (prompt) {
		calFeedback = document.getElementById('cal_feedback');
		feedback = calFeedback.innerHTML;
	} else {
		calFeedback = document.getElementById(caller);
		feedback = calFeedback.value;
	}	
		
	// parse feedback if a date had been previously selected
	//and we'll use in case a new momth/year is selected
	var parseDate = feedback.match(/(\d+)/);

	if (picked) {//definitely clicked on a date

		var dateCell, date, day;

		//check if an already selected date with listing results being returned
		if (picked.match(/[a-z]+/i)) {

			//in this case, picked is the date text: 'day, date month year'
			var pickParse = picked.match(/(\d+).*?(\w+).*?(\d+)/)
			picked = pickParse[1]; //date number
			year = pickParse[3]; //year

			//convert month to title case to find index in months array
			thisMonth = pickParse[2];
			thisMonth = thisMonth[0].toUpperCase() + thisMonth.substring(1,);
			month = months.indexOf(thisMonth)

			//highlight date that was selected 
			dateCell = document.getElementById('date_select_'+picked);
			dateCell.id = 'date_selected'
		}

		//create feedback text
		date = new Date (year, month, picked)
		var day = daysofWeek[date.getDay()];
		feedback = day+', '+picked+' '+mthPick+' '+year;

	} else if (parseDate) {// prev clicked but now selected new month/year
		parseDate = parseDate[0]
		var date = new Date(year, month, parseDate);
		var day = daysofWeek[date.getDay()];
		feeedback = day+', '+parseDate+' '+mthPick+' '+year;

	} else {//no pick/month/year: use prompt
		feedback = prompt;
	}

	//update
	if (prompt) { //listings search
		calFeedback.innerHTML = feedback;
	
	} else { //event dates

		if (caller.search(/from/i) != -1) {

			var toDate = document.getElementById('to').value
			toDate = new Date(toDate)

			if (toDate && feedback && (new Date(feedback) > toDate )) {
				calFeedback.value = warningLate
				invalid = true
			}

			if (!invalid) {
				calFeedback.value = feedback
			}

			
		} else if (caller.search(/to/i) != -1) {

			var frDate = document.getElementById('from').value
			frDate = new Date(frDate)

			if (frDate && (feedback && new Date(feedback) < frDate )) {
				calFeedback.value = warningEarly
				invalid = true
			}

			if (!invalid) {
				calFeedback.value= feedback
			}
		}	
	}			
}

/* get calendar built */
function callCalendar({par=null,spanYear=2,prompt=null,name=null, 
						addr=null, curDatePick=null,caller=null}) {

	//calendar parent to append to
	var parent = document.getElementById(par)

	// parameters
	var today = new Date();
	var thisMonth = today.getMonth();
	var thisYear = today.getFullYear();

	var daysofWeek = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];

	var months = ['January','February','March','April','May','June','July',
					'August','September','October','November','December'];

	//literal object with arguments
	var args = {
			parent : parent,
			spanYear : spanYear,
			thisMonth : thisMonth,
			thisYear : thisYear,
			daysofWeek : daysofWeek,
			months : months,
			prompt : prompt,
			urlAddress : addr,
			name : name,
			caller : caller,
	}

	//build calendar
	buildCalendar(args); //table and month & year select options

	//update any current date selection or use today
	getDateFeedback(curDatePick, args); //text feedback

	//these available after creating calendar
	var monthSelect = document.getElementById('month_select');
	var yearSelect = document.getElementById('year_select');
	var calSubmitBtn = document.getElementById('cal_submit_btn');

	
	//update calendar when years changed
	yearSelect.addEventListener('change', function() {

		//get month - must convert to index
		args.thisYear = yearSelect.value;
		args.thisMonth = months.indexOf(monthSelect.value);
		populateCalendarDates(args);

		getDateFeedback(null,args); //text feedback

	});

	//update dates when month changed
	monthSelect.addEventListener('change', function() {

		// get new month
		var newMonth = monthSelect.value;
		args.thisMonth = months.indexOf(monthSelect.value);
		args.thisYear = yearSelect.value;
		populateCalendarDates(args);

		getDateFeedback(null,args);  //text feedback
	});

	//update date listeners - in a new function as must be updated
	//following any month/year change after new dateRows are populated
	setDateListeners(args);

}


/* set date format if returned by Django */
function calDateFormat() {
	//we also set the placeholder to allow :hover to work
	//on trying to set date as :hover doesn't work for placeholder text

	var dates = [document.getElementById('from'),
					document.getElementById('to')] 

	for (let date of dates) {

		var daysofWeek = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
		var months = ['January','February','March','April','May','June','July',
						'August','September','October','November','December'];

		if ( date.value && date.value.search(/[a-z]/) == -1 ) {

			//use split to parse date as new date() with 'd/m/y' might yield
			//unpredictable 'm/d/y' implementation depending on browser
			var split = date.value.split('/')
			var day = new Date(split[2], split[1], split[0]).getDay()
			var dte = split[0]
			if (dte[0] == '0') {dte = dte.substring(1,)} //rm leading 0 eg 01
			date.value = daysofWeek[day] + ', ' + 				//dayofweek
						dte + ' ' +						//date
						months[Number(split[1])-1]  + ' ' + 	//month name
						split[2]								//year
		} else {

			if (date.id == 'from') {date.value = 'Start'}
			if (date.id == 'to') {date.value = 'End (optional)'}
		}
	
		//clear placeholder on focus
		date.addEventListener('focus', function() {
  			date.setAttribute('placeholder', '')
		});
	}
}


/* split string based on separators removing extraneous stuff */
function splitThis(errors, sep) {

	let split = [];
	var err = errors;
	err = err.split(sep);
	
	for (var e = 0; e < err.length; e++){
		if (err[e].search(/[a-z]/) != -1 ) {
			split.push(err[e]);
		}
	}
	return split
}


/* error board/note to show for add event errors */
function errBoard(errors) {

	//remove any previous board
	var board;
	board = document.getElementById('error_board')
	if (board) {board.remove()}

	//create new board
	board = document.createElement('div')
	document.body.appendChild(board); 
	board.id = 'error_board'
	
	//create board title div
	var boardTitle = document.createElement('div');
	board.appendChild(boardTitle);
	boardTitle.className = 'error_board_title';
	
	//add errors to the board
	var count = 0
	for (let err in errors) {

		count++

		var textspan = document.createElement('div');
		board.appendChild(textspan);
		textspan.className = 'error_board_msg'

		var errtext = count + ': ' + errors[err]
		errtext = document.createTextNode(errtext);
		textspan.appendChild(errtext)
	}

	//add title text now we know count
	var errmsg = 'Please correct ' + count + ' errors';
	if (count == 1) {//rm trailing 's'
		errmsg = errmsg.substring(0,errmsg.length - 1)
	}
	errmsg = document.createTextNode(errmsg);
	boardTitle.appendChild(errmsg);
}


/* check if object is empty */
function isEmptyObject(obj) {
	for (var prop in obj) {
		if (obj.hasOwnProperty(prop)) {
			return false;
		}
	}
	return true;
}


/* validate add event form */
function eventValidation(serverErrors) {

	var submitEvent = null;
	
	submitEvent = document.getElementById('submit_event');
	if (!submitEvent) { //so logged in to edit events
		submit_event = document.getElementById('my_submit_event');
	}

	var eventForm = document.getElementById('addEvt');

	//checks: server error name: {elem id, error message}
	var checks = {
		'evt_nam':{elemId:'id_evt_nam', msg:'Enter a valid event name'},
		'evt_dte':{elemId:'from', msg:'Enter a valid event date'},
		'evt_end_ev':{elemId:'to', msg:'End date is before start date'},
		'evt_end_td':{elemId:'to', msg:'End date is before today'},
		'ven_nam':{elemId:'id_ven_nam', msg:'Enter a valid venue name'},
		'ven_cty':{elemId:'id_ven_cty', msg:'Enter a valid city name'},
		'ven_ctr':{elemId:'id_ven_ctr', msg:'Select a country'},
		'ven_tme':{elemId:'id_ven_tme', msg:'Set venue Close later than Open'},
		'ven_tme_dflt':{elemId:'n/a', msg:'Set valid venue default times'},
		'tme_beg':{elemId:'id_tme_beg', msg:'Start time should not be 00:00'},
		'tme_end':{elemId:'id_tme_end', msg:'Set End time later than Start'},
		'meta_tag':{elemId:'add_evt_meta', msg:'Select a subject tag'},
		'inf_url':{elemId:'id_inf_url', msg:'Enter a valid event url'},
	}
	
	//perform browser form validation before form submit
	submitEvent.addEventListener('click', function (e) {

		let errors = {}
	
		for (var c in checks) {

			let ch = checks[c]

			//get element
			var elem = document.getElementById(ch.elemId)

			if (!elem) {continue;} //elem not on page eg ven_tme
			
			try {

				//check dates
				if (c == 'evt_dte') {
					if (elem.value.indexOf('Start') != -1)
						throw 'no select'; //no input
					continue;
				}

				//check end date >= start && today
				if (c == 'evt_end_ev' || c == 'evt_end_td') {
					
					//get end date
					let endDate = document.getElementById(ch.elemId).value
					endDate = new Date(endDate)
					
					//get start date
					evtDateId = checks['evt_dte'].elemId
					let begDate = document.getElementById(evtDateId).value
					begDate = new Date(begDate)
					
					if (endDate && begDate) {
						if (endDate < begDate)
							throw 'invalid'
					}

					if (endDate < new Date()) throw 'invalid'; // is < today

					continue; //else, no errors, continue

				}

				//skip times if using venue default
				if (c == 'tme_beg' || c == 'tme_end') {
					var useVenTime = null;

					useVenTime = document.getElementById('tme_venue')
					if (!tme_venue) { //so default venue already selected
						useVenTime = document.getElementById('dflt_tme_venue')
					}
					
					if (useVenTime && useVenTime.checked == true) {
						continue
					}
				}

				//check time end: check input > any tme_beg 
				if (c == 'tme_end') {
					
					let endVal = elem.value
					let tmeBegId = checks['tme_beg'].elemId;
					let tmeBeg = document.getElementById(tmeBegId)
					let begVal = tmeBeg.value

					if (endVal != '00:00' && begVal) {
						if (endVal < begVal) throw 'invalid'
					}

					//continue if no input or error
					continue;
				}

				//ignore ven_details if saved venue selected
				if (c == 'ven_nam' || c == 'ven_cty' ||
					c == 'ven_ctr' || c == 'ven_tme') {	
					var myVen = document.getElementById('id_venue')	
					if (myVen) {
						if (myVen.selectedIndex != '0') {
							continue;
						}
					}
				}
					
				//check url input
				if (c == 'inf_url') {
					
					let val = elem.value

					if (val) {

						if (!val.match(/\./)) throw 'invalid'; // no dots

						//if www then at least 2 dots: www.blah.com
						if (val.indexOf('www') > 0) { 
							if (val.match(/\./g) &&
								val.match(/\./g).length < 2)
								throw 'invalid';
						}
					}

					//continue if no input or error
					continue;
				}
				
				//for text types if text == ''
				if (!elem.value && !elem.textContent)
					throw 'no input'; //no input

				//for select types if no selected
				if (elem.nodeName == 'SELECT') {
					if (elem.selectedIndex == 0) {
						throw 'no select'; //no input
					}
				}
			}

			catch(e) {				
				if (e == 'no input') { //no input
					errors[c] = ch.msg
				} else if (e == 'no select') {
					errors[c] = ch.msg
				} else if (e == 'invalid') {
					errors[c] = ch.msg
				}
			}
		}
		
		//show errors but submit form if not any
		if (!isEmptyObject(errors)) {
			errBoard(errors); //create and show board
			e.preventDefault(); //don't submit
		
		} else {
			submitEvent.click() //submit form
		}
	});


	//errors thrown by server	
	document.addEventListener('DOMContentLoaded',function() {

		let errors = {}

		let errs = splitThis(serverErrors,'&#39;')
		if (errs) {
			for (let err of errs) {
				let ch = checks[err]
				errors[err] = ch.msg
				//open venue form if there's an error
				if (err='ven_tme_dflt') {hideBlankVenue('False')}
			}
		}

		if (!isEmptyObject(errors)) {
			errBoard(errors); //create and show board
		}
	});
}


function Element(item, root_) {

	// set root
	var root = document.getElementById(root_);
	this.root = root 

	// store all event details as underscore properties
	for (let k in item) {
		this['_'+k] = item[k]
	}
}


Element.prototype.getElem = function(attribs) {

	// create element
	let elem = document.createElement(attribs.sel);

	// array of element properties irrelevant or handled differently
	let skips = ['sel','par','txt'];

	// set element attributes
	for (let k in attribs) {
		
		if (skips.includes(k)) continue;
		
		if (attribs[k]) {
			
			// correct html tag names
			let k_ = k;
			switch (k) {
				case 'cls': 
					k_ = 'class';
					break;
				case 'typ':
					k_ = 'type';
					break;
				case 'val':
					k_ = 'value';
					break;
				case 'fact':
					k_ = 'formaction';
					break;
				case 'fmet':
					k_ = 'formmethod';
					break;
			}	

			elem.setAttribute(k_, attribs[k]);
		}
	}
	elem.textContent = attribs.txt;

	// attach parent
	attribs.par.appendChild(elem);
	
	// return element so calling for loop can use elem
	return elem;

}


function parseJson(text) {
	text = text.replace(/&#39;/g,'')
	text = text.replace(/&quot;/g,'"')
	return JSON.parse(text)
}

/* build cities list */ 
function createCities(cities_, prior) {

	let cities = parseJson(cities_)
	prior = prior.replace('&amp;','&')

	// loop through items and create DOM elements for each
	// these are listed below in order as it's important to create
	// parents before the children
	for (let e in cities) {

		let cty = new Element(cities[e], 'city_wrap');

		cty.wrap 	= 	cty.getElem ({'sel': 'div', 
								'cls': 	'city',
								'par': 	cty.root });

		cty.tag 	= 	cty.getElem({'sel': 'a',
								'cls': 	'meta_tag subject_tag cty_tag',
								'txt': 	'#'+cty['_name'],
								'href': '/listings/'+prior+
										'&cty='+cty['_name'],
								'par': 	cty.wrap }); 
	}
}


/* build metas list */ 
function createMetas(metas_, prior) {

	let metas = parseJson(metas_)
	prior = prior.replace('&amp;','&')

	// loop through items and create DOM elements for each
	// these are listed below in order as it's important to create
	// parents before the children
	for (let e in metas) {

		let met = new Element(metas[e], 'meta_wrap');

		met.wrap 	= 	met.getElem ({'sel': 'div', 
								'cls': 	'meta',
								'par': 	met.root });

		met.tag 	= 	met.getElem({'sel': 'a',
								'cls': 	'meta_tag subject_tag cty_tag',
								'txt': 	'#'+met['_name'],
								'href': '/listings/'+prior+
										'&met='+met['_name'],
								'par': 	met.wrap }); 
	}
}

/* build events list */ 
function createListings(events_, prior) {

	// text transforms
	let events = parseJson(events_)
	prior = prior.replace('&amp;','&')

	// zero-base counter of rows for id use
	let counter = 0;

	// loop through items and create DOM elements for each
	// these are listed below in order as it's important to create
	// parents before the children
	for (let e in events) {

		let evt = new Element(events[e], 'events');

		evt.divider 	= 	evt.getElem ({'sel': 'div', 
								'cls': 	'listings_span_border',
								'par': 	evt.root });

		evt.row 		= 	evt.getElem({'sel': 'div', 
								'id': 	'event_row_'+counter, 
								'cls': 	'event_row',
								'par': 	evt.root });
					
		evt.box 		= 	evt.getElem({'sel': 'div', 
								'id': 	'event_box_'+counter, 
								'cls': 	'event_box',
								'par': 	evt.row });
		
		evt.nextDateHint = 	evt.getElem({'sel': 'div',
								'cls': 'next_date_tag',
								'par':  evt.box,
								'txt': 	evt['_nextDateHint'] });

		evt.nextDate 	= 	evt.getElem({'sel': 'div',
								'cls': 'date_tag',
								'txt': 	evt['_nextDate'],
								'par':  evt.box });

		evt.titleWrap 	= 	evt.getElem({'sel': 'div',
								'id': 	''+counter,
								'name': evt['_evtRef'],
								'par':  evt.box });

		evt.title 		= 	evt.getElem({'sel': 'div',
								'cls': 	'event_name',
								'name': events[e]['evtRef'],
								'txt': 	evt['_title'],
								'par':  evt.titleWrap });

		evt.slug 		= 	evt.getElem({'sel': 'div',
								'id': 	'slug_'+counter,
								'cls': 	'pg_slug',
								'txt': 	(evt['_descr'].length > 125) ? 
										evt['_descr'].slice(0,125) + ' ...' : 
										evt['_descr'],
								'par': 	evt.titleWrap }); 


		evt.boxLine 	= 	evt.getElem({'sel': 'hr',
								'cls': 	'event_box_line_heavy',
								'par':  evt.box });


		evt.metaWrap 	= 	evt.getElem({'sel': 'div',
								'cls': 	'meta_tag_event_wrap',
								'par':  evt.box });

		evt.metaTag 	= 	evt.getElem({'sel': 'input',
								'cls': 	'meta_tag meta_tag_event',
								'name': 'meta_tag',
								'val': 	'#'+evt['_meta'],
								'typ': 	'submit',
								'fact': '/listings/'+prior+
										'&met='+evt['_meta'],
								'fmet': 'get', /* formmethod */
								'par':  evt.metaWrap }); 

		evt.photoBox 	= 	evt.getElem({'sel': 'div',
								'id': 	'evt_dte_'+counter,
								'cls': 	'photo_tag_box',
								'name': events[e]['evtRef'],
								'par':  evt.metaWrap });

		evt.img 		= 	evt.getElem({'sel': 'div',
								'cls': 	'event_box_img_tiny',
								'style': "background-image:url(" + 
										evt['_img'] + ")",
								'par':  evt.photoBox });

		evt.more 		= 	evt.getElem({'sel': 'div',
								'id': 	'more_text_'+counter,
								'cls': 	'more_text',
								'name': evt['_evtRef'],
								'txt': 	' details ',
								'par': 	evt.photoBox }); 

		evt.moreArrow 	= 	evt.getElem({'sel': 'span',
								'id': 	'r_arrow_'+counter,
								'cls': 	'r_arrow',
								'txt': 	'V',
								'par': 	evt.more }); 


		evt.venCityWrap	= 	evt.getElem({'sel': 'div',
								'cls': 'event_ven_cty_row',
								'par': evt.box }); 

		evt.venWrap 	= 	evt.getElem({'sel': 'span',
								'par': evt.venCityWrap }); 

		evt.venName 	= 	evt.getElem({'sel': 'a',
								'id': 	'event_venue_'+counter,
								'cls': 	'event_venue',
								'txt': 	'#'+evt['_venName'],
								'href': '/listings/'+prior+
										'&ven='+evt['_venName'],
								'par': 	evt.venWrap }); 

		
		evt.getElem({'sel': 'br', 'par': evt.venWrap }); 

		
		evt.venCity 	= 	evt.getElem({'sel': 'a',
								'id': 	'event_city_'+counter,
								'cls': 	'event_city',
								'txt': 	'#'+evt['_venCity'],
								'href': '/listings/'+prior+
										'&cty='+evt['_venCity'],
								'par': 	evt.venWrap }); 

		evt.venZip 		= 	evt.getElem({'sel': 'a',
								'id': 	'event_zip_'+counter,
								'cls': 	'event_city event_zip',
			'txt': 	(evt['_venZip']) ? '...' + '#'+evt['_venZip'] + ',' : '',
								'href': '/listings/'+prior+
										'&zip='+evt['_venZip'],
								'par': evt.venWrap }); 

		
		evt.getElem({'sel': 'br', 'par': evt.venWrap });

		
		evt.venZip 		= 	evt.getElem({'sel': 'a',
								'id': 	'event_ctr_'+counter,
								'cls': 	'event_ctr',
								'txt': 	' #'+evt['_venCtr'],
								'href': '/listings/'+prior+
										'&ctr='+evt['_venCtr'],
								'par': 	evt.venWrap }); 


		evt.tagsWrap 	= 	evt.getElem({'sel': 'div',
								'cls': 	'tag_links',
								'par': 	evt.box }); 


		// check number of tags then create elems
		let a_ = evt['_tags'].length
		for (let a = 0; a < a_; a++ ) {
							let tag = evt['_tags'][a]
							evt.getElem({'sel': 'a',
								'id': 	'blink_tag_'+a,
								'cls': 	'subject_tag tag_tag',
								'txt': 	'#'+tag,
								'href': '/listings/'+prior+'&tag='+tag,
								'par': 	evt.tagsWrap });			
		}

		evt.interWrap 	= 	evt.getElem({'sel': 'div',
								'cls': 'interactive',
								'par': evt.box }); 

		evt.interactive = 	evt.getElem({'sel': 'span',
								'cls': 	'inter_rec',
								'txt': 	'RECOMMEND THIS EVENT',
								'par': 	evt.interWrap }); 

		evt.getElem({			'sel': 	'hr',
								'cls': 	'interactive_line',
								'par': 	evt.interWrap });

		evt.recWrap 	= 	evt.getElem({'sel': 'span',
								'cls': 	'recommend_wrap',
								'par': 	evt.interWrap }); 

		evt.recommend 	= 	evt.getElem({'sel': 'a',
								'id': 	'rec_'+evt['_evtRef'],
								'cls': 	'recommend_tag',
								'txt': 	'Recommend',
								'par': 	evt.recWrap });	

		evt.recCount 	= 	evt.getElem({'sel': 'span',
								'id': 	'rec_count_'+evt['_evtRef'],
								'cls': 	'rec_count',
								'txt': 	evt['_recCount'],
								'par': 	evt.recWrap });		
 
		evt.commentsWrap = 	evt.getElem({'sel': 'span',
								'cls': 	'comment_wrap',
								'par': 	evt.interWrap }); 

		evt.comment 	= 	evt.getElem({'sel': 'a',
								'id': 	'com_'+evt['_evtRef'],
								'cls': 	'comment_tag',
								'txt': 	'Comments',
								'par': 	evt.commentsWrap });	

		evt.comCount 	= 	evt.getElem({'sel': 'span',
								'id': 	'com_count_'+evt['_evtRef'],
								'cls': 	'com_count',
								'txt': 	evt['_comCount'],
								'par': 	evt.commentsWrap });
 
		evt.addComment 	= 	evt.getElem({'sel': 'span',
								'id': 	'com_add_'+evt['_evtRef'],
								'cls': 	'com_add',
								'txt': 	' + ',
								'par': 	evt.commentsWrap });		

		evt.comments 	= 	evt.getElem({'sel': 'div',
								'cls': 	'event_comments',
								'par': 	evt.box }); 

		evt.hideComments = 	evt.getElem({'sel': 'div',
								'id': 	'evt_com_'+evt['_evtRef'],
								'cls': 	'hide_form',
								'par': 	evt.comments }); 

		evt.infoWrap 	= 	evt.getElem({'sel': 'div',
								'cls': 	'event_info',
								'par': 	evt.box }); 

		evt.infoPage 	= 	evt.getElem({'sel': 'div',
								'id': 	'page_'+counter,
								'cls': 	'hide_form',
								'par': 	evt.infoWrap }); 

		evt.infoWhen 	= 	evt.getElem({'sel': 'div',
								'cls': 	'evt_info',
								'txt': 	('Date'.padEnd(10,'. ')) + 
										evt['_fromDate'] + 
										((evt['_toDate'] && 
										evt['_fromDate'] !== evt['_toDate']) ? 
										' - ' + evt['_toDate'] : ''),
								'par': 	evt.infoPage });  

		evt.infoDays 	= 	evt.getElem({'sel': 'div',
								'cls': 	'evt_info',
								'txt': 	('Days'.padEnd(10,'. '))+evt['_days'],
								'par': 	evt.infoPage });  

		evt.infoTime 	= 	evt.getElem({'sel': 'div',
								'cls': 	'evt_info',
								'txt': 	('Time'.padEnd(10,'. ')) + 
										evt['_fromTime'] + 
										((evt['_toTime'] && 
										evt['_toTime'] !== '00:00') ? ' - ' +
										evt['_toTime'] : ''),
								'par': 	evt.infoPage });  

		evt.infoWhere 	= 	evt.getElem({'sel': 'div',
								'cls': 	'evt_info',
								'txt': 	('Where'.padEnd(9,'. ')) + 
										evt['_venName'] + ', ' + 
										evt['_venAddr'] + ', ' + 
										evt['_venCity'] + ', ' +
										evt['_venCtr'],
								'par': 	evt.infoPage }); 


		evt.postCode 	= 	evt.getElem({'sel': 'a',
								'txt': 	(events[e]['venZip']) ? 'Open map: ' + 
										events[e]['venZip'] : '',
								'target': '_blank',
								'href': 'http://maps.google.com/?=' + 
										evt['_venZip'],
								'par': 	evt.infoPage, });


		evt.getElem({'sel': 'br', 'par': evt.infoPage });
		evt.getElem({'sel': 'br', 'par': evt.infoPage });

		evt.descr 		= 	evt.getElem({'sel': 'div',
								'id': 	'slug_'+counter,
								'cls': 	'pg_slug',
								'txt': 	events[e]['descr'],
								'par': 	evt.infoPage }); 

		evt.getElem({'sel': 'hr', 'par': evt.infoPage });


		evt.infoLinks 	= 	evt.getElem({'sel': 'div',
								'id': 	'inf_links_'+counter,
								'par': 	evt.infoPage }); 

		evt.infoWarn 	= 	evt.getElem({'sel': 'i',
								'id': 	'inf_links_'+counter,
								'txt': 	`Please note that dates and times may
									 	change or vary. Always confirm 
									 	with venue before travelling.`,
								'par': 	evt.infoPage, }); 

		
		evt.getElem({'sel': 'br', 'par': evt.infoPage, });

		evt.website 	= 	evt.getElem({'sel': 'input',
								'cls': 	'inf_link',
								'val': 	'Go to website',
								'typ': 	'submit',
								'title': events[e]['website'],
								'onclick': "window.open('" + 
											evt['_website'] + 
											"', '_blank')", 
								'ontouchstart': "window.open('" + 
												evt['_website'] + 
												"', '_blank')",
								'par': evt.infoPage, }); 

		evt.infoMap 	= 	evt.getElem({'sel': 'div',
								'id': 	'ven_map_'+counter,
								'data-postcode': evt['_venZip'],
								'par': 	evt.infoPage, }); 

		counter++
	
	}

}

